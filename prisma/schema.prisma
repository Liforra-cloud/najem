// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  role           String
  hashedPassword String?
  properties     Property[]
  sessions       Session[]
  accounts       Account[]
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  units     Unit[]
}

model Unit {
  id           Int        @id @default(autoincrement())
  name         String
  size         String
  floor        Int
  propertyId   Int
  property     Property   @relation(fields: [propertyId], references: [id])
  leases       Lease[]
  maintenances Maintenance[]
}

model Tenant {
  id      Int     @id @default(autoincrement())
  name    String
  contact String
  leases  Lease[]
}

model Lease {
  id        Int       @id @default(autoincrement())
  unitId    Int
  tenantId  Int
  startDate DateTime
  endDate   DateTime
  rent      Int
  unit      Unit      @relation(fields: [unitId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  payments  Payment[]
  invoices  Invoice[]
}

model Payment {
  id       Int      @id @default(autoincrement())
  leaseId  Int
  amount   Int
  dueDate  DateTime
  status   String
  lease    Lease    @relation(fields: [leaseId], references: [id])
}

model Invoice {
  id        Int       @id @default(autoincrement())
  leaseId   Int
  amount    Int
  issuedAt  DateTime   @default(now())
  pdfPath   String?
  lease     Lease      @relation(fields: [leaseId], references: [id])
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  unitId      Int
  description String
  reportedBy  String
  status      String   @default("OPEN")
  createdAt   DateTime @default(now())
  unit        Unit     @relation(fields: [unitId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String  @unique
  refreshToken       String?
  accessToken        String?
  refreshTokenExpiresIn Int?
  expiresAt          Int?
  tokenType          String?
  scope              String?
  idToken            String?
  sessionState       String?
  user               User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

